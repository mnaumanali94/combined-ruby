# calc
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module CombinedSdk
  # An enum for SDK environments.
  class Environment
    ENVIRONMENT = [
      PRODUCTION = 'production'.freeze,
      TESTING = 'testing'.freeze
    ].freeze
  end

  # An enum for API servers.
  class Server
    SERVER = [
      DEFAULT = 'default'.freeze,
      API_KEY = 'api key'.freeze,
      CALCULATOR_API = 'calculator api'.freeze,
      BASIC_AUTH_API = 'basic auth api'.freeze
    ].freeze
  end

  # All configuration including auth info and base URI for the API access
  # are configured in this class.
  class Configuration
    # The attribute readers for properties.
    attr_reader :http_client
    attr_reader :timeout
    attr_reader :max_retries
    attr_reader :retry_interval
    attr_reader :backoff_factor
    attr_reader :environment
    attr_reader :port_ba
    attr_reader :suit_ba
    attr_reader :port_chs
    attr_reader :suit_chs
    attr_reader :token
    attr_reader :basic_auth_user_name
    attr_reader :basic_auth_password

    class << self
      attr_reader :environments
    end

    def initialize(timeout: 60, max_retries: 0, retry_interval: 1,
                   backoff_factor: 1, environment: Environment::PRODUCTION,
                   port_ba: '80', suit_ba: SuiteCodeEnum::HEARTS,
                   port_chs: '80', suit_chs: SuiteCodeEnum::HEARTS,
                   token: '', basic_auth_user_name: 'TODO: Replace',
                   basic_auth_password: 'TODO: Replace')
      # The value to use for connection timeout
      @timeout = timeout

      # The number of times to retry an endpoint call if it fails
      @max_retries = max_retries

      # Pause in seconds between retries
      @retry_interval = retry_interval

      # The amount to multiply each successive retry's interval amount
      # by in order to provide backoff
      @backoff_factor = backoff_factor

      # Current API environment
      @environment = environment

      # port_ba value
      @port_ba = port_ba

      # suit_ba value
      @suit_ba = suit_ba

      # port_chs value
      @port_chs = port_chs

      # suit_chs value
      @suit_chs = suit_chs

      # The token to use with custom header authentication
      @token = token

      # The username to use with basic authentication
      @basic_auth_user_name = basic_auth_user_name

      # The password to use with basic authentication
      @basic_auth_password = basic_auth_password

      # The Http Client to use for making requests.
      @http_client = create_http_client
    end

    # def clone_with(timeout: nil, max_retries: nil, retry_interval: nil,
    #                backoff_factor: nil, environment: nil)
    #   timeout ||= self.timeout
    #   max_retries ||= self.max_retries
    #   retry_interval ||= self.retry_interval
    #   backoff_factor ||= self.backoff_factor
    #   environment ||= self.environment
    #   port_ba ||= self.port_ba
    #   suit_ba ||= self.suit_ba
    #   port_chs ||= self.port_chs
    #   suit_chs ||= self.suit_chs
    #   token ||= self.token
    #   basic_auth_user_name ||= self.basic_auth_user_name
    #   basic_auth_password ||= self.basic_auth_password

    #   Configuration.new(timeout: timeout, max_retries: max_retries,
    #                     retry_interval: retry_interval,
    #                     backoff_factor: backoff_factor,
    #                     environment: environment)
    # end

    def create_http_client
      FaradayClient.new(timeout: timeout, max_retries: max_retries,
                        retry_interval: retry_interval,
                        backoff_factor: backoff_factor)
    end

    @environments = {
      Environment::PRODUCTION => {
          Server::DEFAULT => 'http://apimatic.hopto.org:{port_chs}',
          Server::API_KEY => 'http://apimatic.hopto.org:{port_chs}',
          Server::CALCULATOR_API => 'http://examples.apimatic.io/apps/calculator',
          Server::BASIC_AUTH_API => 'http://apimatic.hopto.org:{port_ba}'
      },
      Environment::TESTING => {
          Server::DEFAULT => 'http://apimatic.hopto.org:{port_chs}',
          Server::API_KEY => 'http://localhost:3000',
          Server::CALCULATOR_API => 'http://examples.apimatic.io/apps/calculator',
          Server::BASIC_AUTH_API => 'http://localhost:3000'
      }
    }

    # Generates the appropriate base URI for the environment and the server.
    # @param [Configuration::Server] The server enum for which the base URI is
    # required.
    # @return [String] The base URI.
    def get_base_uri(server = Server::DEFAULT)
      parameters = {
        "port_ba" => port_ba,
        "suit_ba" => suit_ba,
        "port_chs" => port_chs,
        "suit_chs" => suit_chs,
      }

      APIHelper.append_url_with_template_parameters(
        self.class.environments[environment][server], parameters
      )
    end
  end
end